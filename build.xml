<?xml version="1.0"?>
<project name="base-webapp2-jinja2" default="test" basedir=".">

    <property environment="env"/>
    <property name="srcdir" value="${basedir}/src" />
    <property name="testdir" value="${basedir}/test" />
    <property name="toolsdir" value="${basedir}/tools" />
    <property name="builddir" value="${basedir}/build" />
    <property name="tests" value=""/> <!-- use, e.g., "ant test -Dtests=app.domain.my_module" -->
    <property name="test.verbosity" value="1" />
    <property name="test.loglevel" value="50" />
    <property name="app.yaml.application" value="base-webapp2-jinja2-dev" />
    <property name="app.yaml.version" value="continuous" />
    <property name="app.yaml.appstats" value="on" />
    <property name="yuicompressor.jar" value="${toolsdir}/ant/yuicompressor-2.4.6.jar"/>
    <property name="coveragedir" value="coverage-report"/>
    
    <condition property="appenginedir" value="/usr/local/google_appengine">
        <available type="dir" file="/usr/local/google_appengine" />
    </condition>
    <condition property="appenginedir" value="C:\Program Files (x86)\Google\google_appengine">
        <available type="dir" file="C:\Program Files (x86)\Google\google_appengine\google\appengine" />
    </condition>
    <condition property="appenginedir" value="C:\Program Files\Google\google_appengine">
        <available type="dir" file="C:\Program Files\Google\google_appengine\google\appengine" />
    </condition>
    
    <property name="debug" value="True"/>

    <path id="tests.pythonpath.ref">
        <pathelement path="${env.PYTHONPATH}"/>
        <pathelement path="${testdir}"/>
        <pathelement path="${srcdir}"/>
        <pathelement path="${srcdir}/lib"/>
        <pathelement path="${basedir}"/>
        <pathelement path="${appenginedir}"/>
        <pathelement path="${appenginedir}/lib/webapp2"/>
        <pathelement path="${appenginedir}/lib/jinja2"/>
        <pathelement path="${appenginedir}/lib/webob_1_1_1"/>
        <pathelement path="${appenginedir}/lib/simplejson"/>
        <pathelement path="${appenginedir}/lib/yaml/lib"/>
        <pathelement path="${appenginedir}/lib/fancy_urllib"/>
        <pathelement path="${toolsdir}"/>
        <pathelement path="${toolsdir}/coverage-3.5.1"/>
        <pathelement path="${toolsdir}/minimock"/>
    </path>
    
    <property name="tests.pythonpath" value="${toString:tests.pythonpath.ref}" />

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${basedir}/tools/ant/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <target name="clean">
        <delete>
            <fileset dir="${srcdir}" includes="**/*.pyc" />
            <fileset dir="${srcdir}" includes="**/*.pyo" />
            <fileset dir="${testdir}" includes="**/*.pyc" />
            <fileset dir="${testdir}" includes="**/*.pyo" />
            <fileset dir="${toolsdir}" includes="**/*.pyc" />
            <fileset dir="${toolsdir}" includes="**/*.pyo" />
        </delete>
        <delete dir="${builddir}"/>
    </target>

    <target name="test">
        <exec dir="${basedir}" executable="python" failonerror="true">
            <env key="PYTHONPATH" value="${tests.pythonpath}"/>
            <env key="UNITTEST_VERBOSITY" value="${test.verbosity}"/>
            <env key="UNITTEST_LOGLEVEL" value="${test.loglevel}"/>
            <arg line="${toolsdir}/test_runner.py ${tests}"/>
        </exec>
    </target>

    <target name="pylint-module-src">
        <property name="pylint.module" value="app"/>
        <property name="pylint.cwd" value="${srcdir}"/>
        <property name="pylint.disable_msg" value=""/>
        <property name="pylint.pylintrcfile" value="${toolsdir}/pylintrc"/>
    </target>
	
    
    <target name="pylint-module-test">
        <property name="pylint.module" value="test"/>
        <property name="pylint.cwd" value="${basedir}"/>
        <property name="pylint.pylintrcfile" value="${toolsdir}/pylintrc-test"/>
        <!-- C0111 no docstring warnings for test -->
        <!-- W0201 allow attributes to be defined outside of __init__ (good for mocks) for test -->
        <!-- C0302 too many lines in module -->
        <property name="pylint.disable_msg" value="C0111,W0201,C0302"/> 
    </target>

    <target name="_pylint">
        
        <exec dir="${pylint.cwd}" executable="python" failonerror="false" outputproperty="pylint.output">
            <env key="PYTHONPATH" value="${tests.pythonpath}" />
            <arg line="${toolsdir}/pylint/lint.py --rcfile=${pylint.pylintrcfile} --include-ids=y ${pylint.module}"/>
            <arg line="--disable=${pylint.disable_msg}"/>
        </exec>
        
        <!-- echo for debugging -->
        <echo>${pylint.output}</echo>
        
        <!-- make sure the output is as expected -->
        <fail message="Pylint produced output. It must have failed.">
            <condition>
                <not>
                    <equals arg1="${pylint.output}" arg2=""/>
                </not>
            </condition>
        </fail>
    </target>

    <target name="pylint" depends="pylint-module-src, _pylint"/>
    <target name="pylint-test" depends="pylint-module-test, _pylint"/>

    <target name="coverage" depends="clean">
        <exec dir="${basedir}" executable="python" failonerror="true">
            <env key="PYTHONPATH" value="${tests.pythonpath}"/>
            <env key="CODE_COVERAGE_DIR" value="${coveragedir}"/>
            <arg line="${toolsdir}/test_runner.py ${tests}"/>
        </exec>
    </target>
    
    <target name="generate-css">
        <!-- 
        We'll generate before copying as all the generated .css should be committed to source anyway.
        This will also let us leverage the existing config.rb file.
        -->
        <exec dir="${basedir}" executable="compass" failonerror="true">
            <arg value="compile"/>
        </exec>
    </target>
    
    <target name="copy-src-files">
        <!-- copy src files to builddir -->
        <delete dir="${builddir}"/>
        <mkdir dir="${builddir}"/>
        <copy todir="${builddir}">
            <fileset dir="${srcdir}">
                <!-- app.yaml controls most skipped files -->
                <exclude name="config_*.py"/>
                <exclude name="cron_*.yaml"/>
                <exclude name="*.pyc"/>
            </fileset>
        </copy>
    </target>
    
    <target name="rewrite-app-yaml" depends="copy-src-files">
        <!-- rewrite app.yaml -->
        <replaceregexp file="${builddir}/app.yaml" 
                       match="application:.+" 
                       replace="application: ${app.yaml.application}"/>
        <replaceregexp file="${builddir}/app.yaml" 
                       match="version:.+" 
                       replace="version: ${app.yaml.version}"/>
        <replaceregexp file="${builddir}/app.yaml"
                       match="- appstats:.+"
                       replace="- appstats: ${app.yaml.appstats}"/>
    </target>
    
    <target name="inject-config-local" depends="copy-src-files">
        <!-- add a deployment-specific config_local.py file -->
        <copy file="${srcdir}/config_${app.yaml.application}.py"
              tofile="${builddir}/config_local.py"
              failonerror="false" verbose="true" overwrite="true"/>
    </target>

    <target name="rewrite-config" depends="copy-src-files">
        <!-- rewrite config.DEBUG -->
        <replaceregexp file="${builddir}/config.py"
                       match="DEBUG\s*=\s*.*"
                       replace="DEBUG = ${debug}"/>
        <!-- rewrite config.STATIC_VERSION_NUMBER -->
        <replaceregexp file="${builddir}/config.py"
                       match="STATIC_VERSION_NUMBER\s*=\s*.*"
                       replace="STATIC_VERSION_NUMBER = ${build.number}"/>
    </target>

    <target name="inject-robots" depends="copy-src-files">
        <!-- add a deployment-specific robots.txt file -->
        <copy file="${srcdir}/static/robots_${app.yaml.application}.txt"
              tofile="${srcdir}/static/robots.txt"
              failonerror="false" verbose="true" overwrite="true"/>
    </target>

    <target name="shrink-js" depends="copy-src-files">
        <!-- shrink js -->
        <apply executable="java" failonerror="true" parallel="false" force="true" dest="${builddir}" verbose="true">
            <fileset dir="${builddir}" includes="static/js/**/*.js" excludes="**/*-min.js,**/vendor/tiny_mce/**/*.js"/>
            <arg line="-jar"/>
            <arg path="${yuicompressor.jar}"/>
            <srcfile/>
            <arg line="--nomunge"/>
            <arg line="-o"/>
            <mapper type="identity"/>
            <targetfile/>
        </apply>
    </target>

    <target name="shrink-css" depends="copy-src-files">
        <!-- shrink css -->
        <apply executable="java" failonerror="true" parallel="false" force="true" dest="${builddir}" verbose="true">
            <fileset dir="${builddir}" includes="static/css/**/*.css" excludes="**/*-min.css"/>
            <arg line="-jar"/>
            <arg path="${yuicompressor.jar}"/>
            <srcfile/>
            <arg line="--nomunge"/>
            <arg line="-o"/>
            <mapper type="identity"/>
            <targetfile/>
        </apply>
    </target>

    <target name="concat-cron" depends="copy-src-files">
      <concat destfile="${builddir}/cron.yaml" append="yes" fixlastline="yes">
        <path>
          <fileset file="${srcdir}/cron_${app.yaml.application}.yaml" />
        </path>
        <filterchain>
          <expandproperties/>
        </filterchain>
      </concat>
    </target>
    
    <target name="deploy" depends="generate-css, copy-src-files, rewrite-app-yaml,  inject-config-local, rewrite-config, inject-robots, shrink-js, shrink-css, concat-cron">

        <exec executable="${appenginedir}/appcfg.py" resultproperty="appcfg.retcode" inputstring="${gae.password}">
            <arg line="update ${builddir} --no_cookies --email=${gae.email} --passin"/>
        </exec>

    </target>

</project>
